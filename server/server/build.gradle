buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    //asciidoc 파일 컨버팅 -> Build 폴더에 복사
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
}

group = 'com.mainproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    println "asciidoctor output: ${asciidoctor.outputDir}"
    from file("build/docs/asciidoc/")
    into file("src/main/resources/static/docs")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    //WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //WEB Socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    testImplementation 'org.projectlombok:lombok:1.18.22'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'javax.servlet:jstl'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //H2 로컬용
    runtimeOnly 'com.h2database:h2'

    //Mysql 배포용
//    implementation 'mysql:mysql-connector-java'

    //유효성 관련
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //Json Mapper
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    //JWT 관련
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //log
    implementation (
            'ch.qos.logback:logback-classic:1.2.3',
            'ch.qos.logback:logback-core:1.2.3',
    )

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //mockmvc를 restdocs에 사용할 수 있게 하는 라이브러리
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    testImplementation("org.junit.vintage:junit-vintage-engine") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }

}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into "static/docs"
    }
}

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

